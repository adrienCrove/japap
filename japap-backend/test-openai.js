// Script de test pour v√©rifier la cl√© API OpenAI
require('dotenv').config();
const OpenAI = require('openai');

async function testOpenAIKey() {
  console.log('üîç Test de la cl√© API OpenAI...\n');

  const apiKey = process.env.OPENAI_API_KEY;

  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY n\'est pas d√©finie dans .env');
    return;
  }

  console.log('‚úÖ Cl√© API trouv√©e dans .env');
  console.log(`üìù Cl√© commence par: ${apiKey.substring(0, 20)}...`);
  console.log(`üìù Cl√© se termine par: ...${apiKey.substring(apiKey.length - 10)}`);
  console.log(`üìè Longueur de la cl√©: ${apiKey.length} caract√®res\n`);

  try {
    console.log('üîÑ Test de connexion √† OpenAI...');
    const openai = new OpenAI({
      apiKey: apiKey,
    });

    // Test simple : lister les mod√®les disponibles
    const models = await openai.models.list();

    console.log('‚úÖ Connexion r√©ussie !');
    console.log(`üìä Nombre de mod√®les disponibles: ${models.data.length}`);

    // V√©rifier si Whisper est disponible
    const whisperModel = models.data.find(m => m.id === 'whisper-1');
    if (whisperModel) {
      console.log('‚úÖ Mod√®le Whisper-1 disponible !');
    } else {
      console.log('‚ö†Ô∏è  Mod√®le Whisper-1 non trouv√©');
    }

    console.log('\nüéâ La cl√© API est VALIDE et fonctionnelle !');

  } catch (error) {
    console.error('\n‚ùå ERREUR lors du test:');
    console.error(`Code: ${error.status || 'N/A'}`);
    console.error(`Message: ${error.message}`);

    if (error.status === 401) {
      console.error('\nüí° La cl√© API est INVALIDE. Actions √† faire:');
      console.error('   1. V√©rifiez que vous avez copi√© la cl√© compl√®te');
      console.error('   2. Cr√©ez une nouvelle cl√© sur https://platform.openai.com/api-keys');
      console.error('   3. V√©rifiez que votre compte OpenAI a du cr√©dit');
    } else if (error.status === 429) {
      console.error('\nüí° Limite de taux atteinte. Attendez quelques secondes et r√©essayez.');
    }
  }
}

testOpenAIKey();
