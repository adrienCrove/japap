generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(uuid())
  phone           String              @unique
  name            String?
  email           String?
  password        String? // Mot de passe hash√© (optionnel pour OAuth)
  gender          String?
  role            String              @default("user")
  status          String              @default("pending")
  reputationScore Int                 @default(100)
  location        Json?
  birthDate       DateTime?
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime?           @updatedAt
  alerts          Alert[]
  confirmations   AlertConfirmation[]
  notifications   Notification[]
  subscriptions   Subscription[]
  userInterests   UserInterest[] // Relation vers les int√©r√™ts de l'utilisateur
  images          Image[] // Images upload√©es par l'utilisateur (DEPRECATED - use ownedMedia)
  uploadedImages  Image[]             @relation("UploadedImages") // Images upload√©es par cet admin/user (DEPRECATED - use uploadedMedia)

  // Nouveau syst√®me media unifi√©
  ownedMedia      Media[]         @relation("MediaOwner")
  uploadedMedia   Media[]         @relation("MediaUploader")
  transcriptions  Transcription[]
}

model Alert {
  id                     String              @id @default(uuid())
  userId                 String?
  category               String? // Deprecated - kept for migration, use categoryAlertId
  categoryAlertId        String? // Foreign key to CategoryAlert
  severity               String?
  description            String?
  location               Json?
  mediaUrl               String? // DEPRECATED - use media relation
  expiresAt              DateTime?
  status                 String              @default("active")
  createdAt              DateTime            @default(now())
  title                  String
  displayTitle           String
  ref_alert_id           String
  source                 String?
  categorySpecificFields Json?
  user                   User?               @relation(fields: [userId], references: [id])
  categoryAlert          CategoryAlert?      @relation(fields: [categoryAlertId], references: [id])
  confirmedBy            AlertConfirmation[]
  notifications          Notification[]
  images                 Image[] // Images associ√©es √† cette alerte (DEPRECATED - use media)

  // Nouveau syst√®me media unifi√©
  media      Media[]  @relation("AlertMedia")
  imageCount Int      @default(0)
  hasAudio   Boolean  @default(false)
  hasVideo   Boolean  @default(false)

  // Syst√®me de partage
  isShared   Boolean   @default(false)
  sharedAt   DateTime?

  @@index([categoryAlertId])
}

model AlertConfirmation {
  id        Int      @id @default(autoincrement())
  userId    String
  alertId   String
  type      String
  createdAt DateTime @default(now())
  alert     Alert    @relation(fields: [alertId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, alertId])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    String
  type      String
  value     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id      String   @id @default(uuid())
  userId  String
  alertId String?
  title   String
  content String
  wasSeen Boolean  @default(false)
  sentAt  DateTime @default(now())
  alert   Alert?   @relation(fields: [alertId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model MessageBot {
  id                  Int      @id @default(autoincrement())
  platform            String
  senderPhone         String
  rawMessage          String
  interpretedCategory String?
  interpretedLocation String?
  interpretedSeverity String?
  alertCreated        Boolean  @default(false)
  createdAt           DateTime @default(now())
}

model MonitoredSource {
  id             String    @id @default(uuid())
  name           String
  url            String
  sourceType     String    @default("social") // 'social' | 'website' | 'rss' | 'api'
  platform       String // 'whatsapp' | 'telegram' | 'facebook' | 'website' | 'rss-feed'
  scrapingConfig Json? // Configuration flexible pour chaque type
  isActive       Boolean   @default(true)
  lastScraped    DateTime?
  contentCount   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([sourceType, isActive])
  @@map("social_links") // Garder le nom de table pour √©viter migration complexe
}

model BroadcastChannel {
  id             String         @id @default(uuid())
  name           String // Ex: "Canal WhatsApp JAPAP", "JAPAP Telegram Official"
  platform       String // 'whatsapp' | 'telegram' | 'instagram'
  credentials    Json // Token, Channel ID, Username selon plateforme
  isActive       Boolean        @default(true)
  followerCount  Int? // Nombre d'abonn√©s (optionnel)
  lastBroadcast  DateTime? // Date derni√®re diffusion
  broadcastCount Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  broadcasts     BroadcastLog[]

  @@index([platform, isActive])
}

model BroadcastLog {
  id        String           @id @default(uuid())
  channelId String
  alertId   String
  status    String           @default("pending") // 'pending' | 'sent' | 'failed'
  message   String? // Message format√© envoy√©
  response  Json? // R√©ponse de l'API (ID message, erreurs, etc.)
  sentAt    DateTime         @default(now())
  channel   BroadcastChannel @relation(fields: [channelId], references: [id])

  @@index([alertId, status])
  @@index([channelId, sentAt])
}

model Interest {
  id                     String                  @id @default(uuid())
  label                  String                  @unique // "Alertes de s√©curit√© √† proximit√©"
  code                   String                  @unique // "nearby_alerts"
  description            String?
  createdAt              DateTime                @default(now())
  userInterests          UserInterest[]
  categoryAlertInterests CategoryAlertInterest[]
}

model UserInterest {
  id         String   @id @default(uuid())
  userId     String
  interestId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
  @@index([userId])
  @@index([interestId])
}

// ============ CATEGORY ALERT MODELS ============

model CategoryAlert {
  id          String  @id @default(uuid())
  code        String  @unique // "MEDC", "FIRV", "ACCG", etc.
  name        String // "Urgence m√©dicale critique"
  description String?

  // M√©tadonn√©es visuelles
  icon  String // "üöë", "üî•", "üöó"
  color String // "#dc2626"

  // Classification
  priority        String // "critical", "high", "medium", "low"
  defaultSeverity String @default("medium") // "critical", "high", "medium", "low"

  // Temps de r√©ponse et expiration
  responseTime    Int // minutes (5, 15, 30, 60)
  expirationHours Int? // Heures avant d√©priorisation (null = jamais, ex: disparitions)

  // Services d'urgence et routage (JSON arrays)
  emergencyServices Json // ["SAMU", "Police", "Pompiers"]
  routingMatrix     Json // ["Police", "Gendarmerie", "SAMU"]

  // Parsing NLP (keywords pour d√©tection dans messages)
  keywords Json // ["urgent", "accident", "bless√©"]

  // √âtat et ordre
  isActive Boolean @default(true)
  order    Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  alerts                 Alert[]
  categoryAlertInterests CategoryAlertInterest[]

  @@index([code])
  @@index([priority, isActive])
  @@index([order])
}

// Table de liaison entre Interest (pr√©f√©rences user) et CategoryAlert (types alertes)
model CategoryAlertInterest {
  id              String   @id @default(uuid())
  interestId      String
  categoryAlertId String
  priority        Int      @default(0) // Ordre de priorit√© pour l'utilisateur
  createdAt       DateTime @default(now())

  interest      Interest      @relation(fields: [interestId], references: [id], onDelete: Cascade)
  categoryAlert CategoryAlert @relation(fields: [categoryAlertId], references: [id], onDelete: Cascade)

  @@unique([interestId, categoryAlertId])
  @@index([interestId])
  @@index([categoryAlertId])
}

// ============ IMAGE MANAGEMENT MODELS ============

model Image {
  id           String @id @default(uuid())
  filename     String // Nom du fichier stock√© (avec timestamp)
  originalName String // Nom original du fichier upload√©
  path         String // Chemin relatif: /uploads/alerts/123/image.jpg
  url          String // URL compl√®te accessible
  size         Int // Taille en bytes
  mimeType     String // image/jpeg, image/png, etc.
  width        Int? // Largeur de l'image en pixels
  height       Int? // Hauteur de l'image en pixels

  // Relations
  alertId String? // Alerte associ√©e (optionnel)
  alert   Alert?  @relation(fields: [alertId], references: [id], onDelete: Cascade)

  userId String? // Propri√©taire de l'image
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  uploadedBy String? // Qui a upload√© (admin/user)
  uploader   User?   @relation("UploadedImages", fields: [uploadedBy], references: [id], onDelete: SetNull)

  // Cat√©gorisation
  category String? // "alert", "user", "admin", "broadcast", "temp"
  isPublic Boolean @default(false) // Accessible publiquement ou priv√©

  // M√©tadonn√©es
  metadata Json? // { thumbnail: "/path/to/thumb.jpg", watermark: true, compressed: true, ... }

  // Stockage
  storage String @default("local") // "local" ou "remote"

  // AI Enhancement (Nano Banana / Gemini 2.5 Flash Image)
  isEnhanced          Boolean @default(false) // Image am√©lior√©e par IA
  originalImageId     String? // ID de l'image source (si celle-ci est une version am√©lior√©e)
  originalImage       Image?  @relation("ImageEnhancement", fields: [originalImageId], references: [id], onDelete: SetNull)
  enhancedVersions    Image[] @relation("ImageEnhancement") // Versions am√©lior√©es de cette image
  enhancementMetadata Json? // { model: "gemini-2.5-flash-image", prompt: "...", processingTime: 3500, cost: 0.039 }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([alertId])
  @@index([userId])
  @@index([category])
  @@index([createdAt])
  @@index([isEnhanced])
  @@index([originalImageId])
}

// ============ UNIFIED MEDIA SYSTEM ============

// Model parent unifi√© pour tous les types de m√©dia
model Media {
  id          String   @id @default(uuid())

  // Type et position dans l'alerte
  type        MediaType // IMAGE | AUDIO | VIDEO
  position    Int?      // 1-3 pour images, null pour audio/vid√©o

  // Relations
  alertId     String?
  alert       Alert?    @relation("AlertMedia", fields: [alertId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?     @relation("MediaOwner", fields: [userId], references: [id], onDelete: SetNull)
  uploadedBy  String?
  uploader    User?     @relation("MediaUploader", fields: [uploadedBy], references: [id], onDelete: SetNull)

  // Stockage fichier principal
  filename     String   // {mediaId}-original.{ext}
  originalName String   // Nom du fichier upload√© par l'utilisateur
  path         String   // /uploads/alerts/{alertId}/media/{mediaId}/original.jpg
  url          String   // URL compl√®te accessible
  size         Int      // Bytes
  mimeType     String   // image/jpeg, audio/mpeg, video/mp4

  // Int√©grit√© et s√©curit√©
  checksum     String   // SHA-256 pour d√©tecter corruption/doublons
  capturedAt   DateTime? // Timestamp de capture c√¥t√© client (EXIF ou metadata)
  receivedAt   DateTime  @default(now()) // Timestamp de r√©ception serveur

  // M√©tadonn√©es sp√©cifiques (EXIF, codec, bitrate)
  metadata     Json?    // Flexible pour chaque type

  // Dimensions (images/vid√©os)
  width        Int?
  height       Int?

  // Dur√©e (audio/vid√©os) en secondes
  duration     Float?   // Ex: 25.5s

  // Workflow upload
  uploadStatus UploadStatus @default(PENDING)
  uploadToken  String?  // JWT token pour upload s√©curis√©
  uploadExpiry DateTime? // Expiration token (5 min)
  uploadError  String?  // Message d'erreur si FAILED

  // AI Enhancement (images DISP/DECD uniquement)
  isEnhanced          Boolean @default(false)
  originalMediaId     String?
  originalMedia       Media?  @relation("MediaEnhancement", fields: [originalMediaId], references: [id], onDelete: SetNull)
  enhancedVersions    Media[] @relation("MediaEnhancement")
  enhancementMetadata Json?   // { model, processingTime, cost }

  // Relations vers d√©riv√©s et transcriptions
  derivatives    MediaDerivative[]
  transcriptions Transcription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([alertId, type, position]) // Requ√™te rapide par alerte+type+position
  @@index([alertId, type])
  @@index([userId])
  @@index([checksum]) // D√©tection doublons
  @@index([uploadStatus])
  @@index([uploadExpiry]) // Cleanup tokens expir√©s
}

// D√©riv√©s g√©n√©r√©s (thumbnails, previews, waveforms)
model MediaDerivative {
  id          String   @id @default(uuid())

  // Relation vers m√©dia parent
  mediaId     String
  media       Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // Type de d√©riv√©
  derivativeType DerivativeType // THUMBNAIL | MEDIUM | LARGE | PREVIEW | WAVEFORM

  // Stockage
  filename    String   // {mediaId}-thumb.jpg
  path        String   // /uploads/alerts/{alertId}/media/{mediaId}/thumb.jpg
  url         String
  size        Int
  mimeType    String

  // Dimensions (si applicable)
  width       Int?
  height      Int?
  duration    Float?   // Pour previews vid√©o

  // M√©tadonn√©es de g√©n√©ration
  generatedBy String?  // "sharp", "ffmpeg", "cloudinary"
  metadata    Json?    // Params de g√©n√©ration: quality, compression, etc.

  createdAt   DateTime @default(now())

  @@unique([mediaId, derivativeType]) // Un seul thumbnail par m√©dia
  @@index([mediaId])
}

// Transcriptions audio (versionn√©es)
model Transcription {
  id          String   @id @default(uuid())

  // Relation vers audio
  mediaId     String
  media       Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // Contenu transcription
  text        String   @db.Text
  language    String?  // "fr", "en"
  confidence  Float?   // 0.0-1.0

  // Version et source
  version     Int      // Auto-incr√©ment√© (1, 2, 3...)
  source      TranscriptionSource // AUTO | HUMAN_CORRECTED | MANUAL
  model       String?  // "openai-whisper-1" ou null

  // M√©tadonn√©es
  metadata    Json?    // Word timestamps, alternatives, etc.

  // Qui a cr√©√©/corrig√©
  createdBy   String?
  creator     User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  // Statut
  isActive    Boolean  @default(false) // Une seule version active

  createdAt   DateTime @default(now())

  @@index([mediaId, version])
  @@index([mediaId, isActive]) // R√©cup√©rer la meilleure transcription
}

// ============ ENUMS ============

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
}

enum UploadStatus {
  PENDING      // Slot r√©serv√©, upload pas encore commenc√©
  UPLOADING    // Upload en cours
  PROCESSING   // Upload termin√©, g√©n√©ration d√©riv√©s en cours
  COMPLETED    // Tout termin√©
  FAILED       // √âchec
}

enum DerivativeType {
  THUMBNAIL    // 150x150px
  MEDIUM       // 800x600px
  LARGE        // 1920x1080px
  PREVIEW      // Vid√©o: 10s clip
  WAVEFORM     // Audio: SVG visualization
}

enum TranscriptionSource {
  AUTO              // G√©n√©r√© par Whisper
  HUMAN_CORRECTED   // Corrig√© par humain
  MANUAL            // Saisi manuellement
}

// ============ NEWS AGGREGATION MODELS ============

model NewsArticle {
  id              String   @id @default(uuid())

  // M√©tadonn√©es de base
  title           String
  summary         String?  @db.Text
  content         String   @db.Text

  // Source
  sourceUrl       String   // URL de l'article original
  sourceName      String   // Nom de la source (ex: "Cameroon Tribune")
  sourceId        String?  // ID de la source dans sources.js

  // Cat√©gorisation
  categories      String[] // ["s√©curit√©", "transport", "sant√©"]
  primaryCategory String?  // Cat√©gorie principale

  // Localisation
  location        Json?    // { country: "CM", city: "Yaound√©", coordinates: {...} }

  // Dates
  publishedAt     DateTime // Date de publication par la source
  scrapedAt       DateTime @default(now()) // Date de scraping

  // Scoring et pertinence
  relevanceScore  Float?   // 0.0-1.0 bas√© sur keywords et algorithme
  priority        String   @default("medium") // "low", "medium", "high"

  // M√©dias associ√©s
  imageUrl        String?  // Image principale (URL externe)
  images          Json?    // Array d'URLs d'images suppl√©mentaires

  // Relations avec alertes JAPAP
  relatedAlertIds String[] // IDs des alertes li√©es

  // M√©tadonn√©es enrichies
  author          String?  // Auteur de l'article
  tags            String[] // Tags additionnels
  language        String   @default("fr") // "fr", "en"

  // Statut et affichage
  isActive        Boolean  @default(true)
  isVerified      Boolean  @default(false) // V√©rifi√© par mod√©rateur
  views           Int      @default(0)

  // SEO et identifiants
  slug            String?  @unique // URL-friendly identifier
  externalId      String?  // ID dans le syst√®me de la source

  // M√©tadonn√©es suppl√©mentaires
  metadata        Json?    // Champs flexibles: scraperVersion, rawData, etc.

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([publishedAt])
  @@index([scrapedAt])
  @@index([primaryCategory])
  @@index([relevanceScore])
  @@index([sourceName])
  @@index([isActive, publishedAt])
  @@map("news_articles")
}

model NewsSource {
  id              String   @id @default(uuid())

  // Informations de base
  name            String   @unique // "Cameroon Tribune"
  url             String   // URL du flux RSS ou site
  type            String   // "rss", "scraper", "api"

  // Configuration
  category        String[] // ["general", "politique"]
  location        Json?    // { country: "CM", city: "Yaound√©" }

  // √âtat et performance
  isActive        Boolean  @default(true)
  lastScraped     DateTime?
  lastSuccess     DateTime?
  lastError       String?

  // Statistiques
  articleCount    Int      @default(0)
  errorCount      Int      @default(0)
  successRate     Float?   // 0.0-1.0

  // Configuration de scraping
  scrapingConfig  Json?    // { interval: "0 */2 * * *", maxArticles: 20, ... }

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
  @@index([lastScraped])
  @@map("news_sources")
}
